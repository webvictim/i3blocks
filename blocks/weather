#!/bin/bash
# Based on http://openweathermap.org/current

# get your own API key by registering at http://openweathermap.org 
# put it in ~/.config/i3blocks/openweathermap_api_key as a single line:
# OPENWEATHERMAP_API_KEY="<your key here>"
GEOLOCATION_IGNORE_FILE=/tmp/weather-geolocation-ignored

# read API key from file
KEY_FOUND=false
if [ -f ~/.config/i3blocks/openweathermap_api_key ]; then
    source ~/.config/i3blocks/openweathermap_api_key
    KEY_FOUND=true
fi
if [[ "${OPENWEATHERMAP_API_KEY}" == "" ]]; then
    KEY_FOUND=false
fi
if [[ "${KEY_FOUND}" == "false" ]]; then
    echo "API key missing"
    echo "API key missing"
    echo ""
    exit 1
fi

# you need 'jq' installed for JSON processing too
JQ_STATUS=$(command -v jq)
if [[ $? -gt 0 ]]; then
    echo "Install JQ"
    echo "Install JQ"
    echo ""
    exit 1
fi

# left click will write a file that ignores geolocation until the next reboot
if [[ "${BLOCK_BUTTON}" -eq 1 ]]; then
    touch ${GEOLOCATION_IGNORE_FILE}
# right click will remove this file again
elif [[ "${BLOCK_BUTTON}" -eq 3 ]]; then
    rm -f ${GEOLOCATION_IGNORE_FILE}
fi

# Check on http://openweathermap.org/find
CITY_ID="${BLOCK_INSTANCE}"
if [[ "${BLOCK_INSTANCE}" == "" ]]; then
    CITY_ID=$1
fi

URGENT_LOWER=0
URGENT_HIGHER=30

ICON_SUNNY=""
ICON_CLOUDY=""
ICON_RAINY=""
ICON_STORM=""
ICON_SNOW=""
ICON_FOG=""

#SYMBOL_CELSIUS="℃"
#SYMBOL_CELSIUS="℃"
SYMBOL_CELSIUS="°c"

# get geolocation data and write it
GEOLOCATION_FILENAME=/tmp/geoip.json
PREV_GEOLOCATION_FILENAME=${GEOLOCATION_FILENAME}.prev
GEOLOCATION_FAILED=false
curl -sL https://freegeoip.app/json/ --header 'Accept: application/json' --header 'Content-Type: application/json' -o ${GEOLOCATION_FILENAME}
CITY=$(jq -r ".city" ${GEOLOCATION_FILENAME})
if [ "${CITY}" == "" ]; then
    CITY=$(jq -r ".city" ${PREV_GEOLOCATION_FILENAME})
    GEOLOCATION_FAILED=true
fi

COUNTRY_CODE=$(jq -r ".country_code" ${GEOLOCATION_FILENAME})
if [ "${COUNTRY_CODE}" == "" ]; then
    COUNTRY_CODE=$(jq -r ".country_code" ${PREV_GEOLOCATION_FILENAME})
    GEOLOCATION_FAILED=true
fi

# are we ignoring geolocation?
GEOLOCATION_IGNORED=false
if [ -f ${GEOLOCATION_IGNORE_FILE} ]; then
    GEOLOCATION_IGNORED=true
fi

# check whether geolocation failed
if [[ "${GEOLOCATION_FAILED}" == "true" ]]; then
    WEATHER_OUTPUT="   Geolocation failed"
fi

# update timezone
PREVIOUS_TZFILENAME="/tmp/previous-timezone"
GEO_TZFILENAME="/tmp/geo-timezone"
TZFILE=$(readlink /etc/localtime)
CURRENT_TIMEZONE=${TZFILE##/usr/share/zoneinfo/}
PREVIOUS_TIMEZONE_FOUND=false
if [ -f "${PREVIOUS_TZFILENAME}" ]; then
    PREVIOUS_TIMEZONE_FOUND=true
    PREVIOUS_TZFILE=$(readlink /tmp/previous-timezone)
    PREVIOUS_TIMEZONE=${TZFILE##/usr/share/zoneinfo/}
fi
GEO_TIMEZONE=$(jq -r ".time_zone" ${GEOLOCATION_FILENAME})
if [[ "${CURRENT_TIMEZONE}" != "${GEO_TIMEZONE}" ]]; then
    if [[ "${GEOLOCATION_IGNORED}" == "true" ]]; then
        if [[ "${CURRENT_TIMEZONE}" != "${PREVIOUS_TIMEZONE}" ]]; then
            logger "Current timezone '${CURRENT_TIMEZONE}' does not match previous timezone '${PREVIOUS_TIMEZONE}' and geolocation is ignored - updating"
            sudo rm -f /etc/localtime && sudo ln -s /usr/share/zoneinfo/${PREVIOUS_TIMEZONE} /etc/localtime
            sudo rm -f ${GEO_TZFILENAME} && sudo ln -s /usr/share/zoneinfo/${GEO_TIMEZONE} ${GEO_TZFILENAME}
        else
            logger "Cannot find /usr/share/zoneinfo/${PREVIOUS_TIMEZONE} to update to previous time zone"            
        fi
    elif [ -f /usr/share/zoneinfo/${GEO_TIMEZONE} ]; then
        logger "Current timezone '${CURRENT_TIMEZONE}' does not match geolocated timezone '${GEO_TIMEZONE}' - updating"
        sudo rm -f ${PREVIOUS_TZFILENAME} && sudo ln -s /usr/share/zoneinfo/${CURRENT_TIMEZONE} ${PREVIOUS_TZFILENAME}
        sudo rm -f /etc/localtime && sudo ln -s /usr/share/zoneinfo/${GEO_TIMEZONE} /etc/localtime
    else
        logger "Cannot find /usr/share/zoneinfo/${GEO_TIMEZONE} to update to geolocated time zone"
    fi
fi

# write geolocated coordinates to file for flux
#LATITUDE=$(jq -r "latitude" ${GEOLOCATION_FILENAME})
#echo "${LATITUDE}" > /tmp/current_latitude
#LONGITUDE=$(jq -r "longitude" ${GEOLOCATION_FILENAME})
#echo "${LONGITUDE}" > /tmp/current_longitude

#WEATHER_URL="http://api.openweathermap.org/data/2.5/weather?id=${CITY_ID}&appid=${OPENWEATHERMAP_API_KEY}&units=metric"

if [[ "${BLOCK_INSTANCE}" == "geolocate" ]]; then
    if [[ "${GEOLOCATION_FAILED}" == "false" ]]; then
        WEATHER_URL="http://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY_CODE}&appid=${OPENWEATHERMAP_API_KEY}&units=metric"
    else
        echo ${WEATHER_OUTPUT}
        echo ${WEATHER_OUTPUT}
        echo ""
        exit 0
    fi
else
    if [[ "${GEOLOCATION_FAILED}" == "false" || "${GEOLOCATION_IGNORED}" != "true" ]]; then
        WEATHER_URL="http://api.openweathermap.org/data/2.5/weather?q=${CITY},${COUNTRY_CODE}&appid=${OPENWEATHERMAP_API_KEY}&units=metric"
    else
        WEATHER_URL="http://api.openweathermap.org/data/2.5/weather?id=${CITY_ID}&appid=${OPENWEATHERMAP_API_KEY}&units=metric"    
    fi
fi

WEATHER_FILENAME=/tmp/weather.txt
PREV_WEATHER_FILENAME=${WEATHER_FILENAME}.prev
WEATHER_INFO=$(wget -qO- "${WEATHER_URL}")
echo "${WEATHER_INFO}" > ${WEATHER_FILENAME}
if [ jq -e >/dev/null 2>&1 < ${WEATHER_FILENAME} -ne 2 ]; then
    GEOLOCATION_FAILED="true"
    WEATHER_INFO=$(cat ${PREV_WEATHER_FILENAME})
fi
#WEATHER_MAIN=$(echo "${WEATHER_INFO}" | grep -o -e '\"main\":\"[a-Z]*\"' | awk -F ':' '{print $2}' | tr -d '"')
#WEATHER_TEMP=$(echo "${WEATHER_INFO}" | grep -o -e '\"temp\":\-\?[0-9]*' | awk -F ':' '{print $2}' | tr -d '"')
WEATHER_CITY=$(echo "${WEATHER_INFO}" | jq -r '.name')
WEATHER_COUNTRY_CODE=$(echo "${WEATHER_INFO}" | jq -r '.sys.country')
WEATHER_MAIN=$(echo "${WEATHER_INFO}" | jq -r '.weather[].main')
WEATHER_TEMP=$(printf "%.0f" $(echo "${WEATHER_INFO}" | jq -r '.main.temp'))
WEATHER_OUTPUT=""

if [[ "${WEATHER_MAIN}" = *Snow* ]]; then
  WEATHER_OUTPUT+="${ICON_SNOW}  "
elif [[ "${WEATHER_MAIN}" = *Rain* ]] || [[ "${WEATHER_MAIN}" = *Drizzle* ]]; then
  WEATHER_OUTPUT+="${ICON_RAINY}  "
elif [[ "${WEATHER_MAIN}" = *Cloud* ]]; then
  WEATHER_OUTPUT+="${ICON_CLOUDY}  "
elif [[ "${WEATHER_MAIN}" = *Clear* ]]; then
  WEATHER_OUTPUT+="${ICON_SUNNY}  "
elif [[ "${WEATHER_MAIN}" = *Fog* ]] || [[ "${WEATHER_MAIN}" = *Mist* ]] || [[ "${WEATHER_MAIN}" = *Haze* ]]; then
  WEATHER_OUTPUT+="${ICON_FOG}  "
else
  WEATHER_OUTPUT+="${WEATHER_MAIN}  "
fi

#if [[ "${BLOCK_INSTANCE}" == "geolocate" ]]; then
#    WEATHER_OUTPUT+="${CITY}, ${COUNTRY_CODE}: ${WEATHER_TEMP}${SYMBOL_CELSIUS}"
#else
#    WEATHER_OUTPUT+=" ${WEATHER_TEMP}${SYMBOL_CELSIUS}"
#fi

GEOLOCATION_SYMBOL=""
WEATHER_OUTPUT+="${WEATHER_CITY}, ${WEATHER_COUNTRY_CODE}"
if [[ "${GEOLOCATION_FAILED}" == "false" && "${GEOLOCATION_IGNORED}" != "true" ]]; then
    WEATHER_OUTPUT+=" ${GEOLOCATION_SYMBOL} "
elif [[ "${GEOLOCATION_FAILED}" == "true" ]]; then
    GEOLOCATION_SYMBOL=""
fi
WEATHER_OUTPUT+=": ${WEATHER_TEMP}${SYMBOL_CELSIUS}"

echo ${WEATHER_OUTPUT}
echo ${WEATHER_OUTPUT}
echo ""

# take a backup of the working weather file
if [ -f ${WEATHER_FILENAME} ]; then
    if [[ "${GEOLOCATION_FAILED}" == "false" ]]; then
        rm -f ${PREV_WEATHER_FILENAME}
        cp ${WEATHER_FILENAME} ${PREV_WEATHER_FILENAME}
    fi
fi

# take a backup of the working geolocation file
if [ -f ${GEOLOCATION_FILENAME} ]; then
    if [[ "${GEOLOCATION_FAILED}" == "false" ]]; then
        rm -f ${PREV_GEOLOCATION_FILENAME}
        cp ${GEOLOCATION_FILENAME} ${PREV_GEOLOCATION_FILENAME}
    fi
fi

# relaunch flux if needed
~/bin/flux.sh 2>&1 >/dev/null

if [[ "${WEATHER_TEMP}" -lt "${URGENT_LOWER}" ]] || [[ "${WEATHER_TEMP}" -gt "${URGENT_HIGHER}" ]]; then
  exit 33
fi
